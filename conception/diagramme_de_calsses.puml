@startuml
class Appointment {
    + id: int <<PK>>
    + date: date
    + heure: time
    + status: varchar(50)
    + telephone: varchar(30)
    + userInfo: json
    + createdAt: datetime
    + updatedAt: datetime
    -- 
    + userId: int <<FK>>  ' FK vers User.id (optionnel)
    + ritualId: int <<FK>>  ' FK vers Ritual.id
}
class Availability {
    + id: int <<PK>>
    + date: date
    + startTime: time
    + endTime: time
    + isBooked: boolean
    + createdAt: datetime
    + updatedAt: datetime
}
class Conseil {
    + id: int <<PK>>
    + title: varchar(100)
    + content: text
    + category: varchar(100)
    + img: varchar(255)
    + createdAt: datetime
    + updatedAt: datetime
}
class ContactMessage {
    + id: int <<PK>>
    + first_name: varchar(255)
    + last_name: varchar(255)
    + email: varchar(255)
    + tel: varchar(50)
    + message: text
    + createdAt: datetime
    + updatedAt: datetime
    --
    + userId: int <<FK>>  ' FK vers User.id (optionnel)
}
class Feedback {
    + id: int <<PK>>
    + comment: text
    + photo: varchar(255)
    + createdAt: datetime
    + updatedAt: datetime
    -- 
    + userId: int <<FK>>  ' FK vers User.id (optionnel)
    + ritualId: int <<FK>>  ' FK vers Ritual.id (optionnel)
}
class Ritual {
    + id: int <<PK>>
    + name: varchar(100)
    + description: text
    + longDescription: text
    + steps: json
    + duration: int
    + price: decimal(10,2)
    + image: varchar(255)
    + createdAt: datetime
    + updatedAt: datetime
}
class User {
    + id: int <<PK>>
    + nom: varchar(100)
    + prenom: varchar(100)
    + email: varchar(100)
    + password: varchar(255)
    + role: varchar(50)
    + telephone: varchar(30)
    + createdAt: datetime
    + updatedAt: datetime
}
' Relations basées sur les clés étrangères (associations simples sans cardinalité précise ici)
Appointment --> User : userId
Appointment --> Ritual : ritualId
Feedback --> User
Feedback --> Ritual : ritualId
ContactMessage --> User : userId
@enduml
